@use "sass:map";

$sun: (
    radius: 1391980,
    colour: rgb(229, 181, 51)
);

// radius is in km
// distance is mean planet-sun distance in km^6
// period is in earth days
$planets: (
    earth: (radius: 6400,
        distance: 150,
        period: 365,
        colour: rgb(38, 99, 192)),
    mercury: (radius: 2440,
        distance: 58,
        period: 88,
        colour: rgb(183, 83, 206))
);

$scale-factors: (
    sun: 50000,
    radius: 640,
    distance: 1,
    period: 36,
);

$scaled-sun: calc(map.get($sun, "radius") / map.get($scale-factors, "sun"));
@each $planet,
$values in $planets {
    $scaled-radius: calc(map.get($values, "radius") / map.get($scale-factors, "radius"));
    $scaled-distance: calc(map.get($values, "distance") / map.get($scale-factors, "distance"));
    $scaled-period: calc(map.get($values, "period") / map.get($scale-factors, "period"));

    ##{$planet} {
        $offset: calc($scaled-sun - $scaled-radius);

        top: $offset + px;
        left: $offset + px;

        width: calc($scaled-radius * 2) + px;
        background-color: #{map.get($values, "colour")};

        transform: translate(calc(cos(0deg) * #{$scaled-distance + px}),
            calc(sin(0deg) * #{$scaled-distance + px}));

        animation: rotate-#{$planet} #{$scaled-period}s linear infinite;
    }

    @keyframes rotate-#{$planet} {
        0% {
            transform: rotate(0deg) translateX(#{$scaled-distance + px}) rotate(0deg);
        }

        100% {
            transform: rotate(-360deg) translateX(#{$scaled-distance + px}) rotate(360deg);
        }
    }
}

body {
    background-color: black;
    display: grid;
    place-items: center;
    min-height: 100vh;
    overflow: hidden;
}

.celestial-body {
    position: absolute;
    aspect-ratio: 1;
    border-radius: 50%;
}

#sun {
    background-color: map.get($sun, "colour");
    width: calc($scaled-sun * 2) + px;
    position: relative;
}